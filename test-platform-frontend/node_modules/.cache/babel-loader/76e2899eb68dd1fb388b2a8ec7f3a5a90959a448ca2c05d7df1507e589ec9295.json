{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nclass AuthService {\n  constructor() {\n    this.apiClient = axios.create({\n      baseURL: `${API_BASE_URL}/api/auth`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    // Add request interceptor to include token\n    this.apiClient.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Add response interceptor for error handling\n    this.apiClient.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Token expired, try to refresh\n        try {\n          await this.refreshToken();\n          // Retry the original request\n          return this.apiClient.request(error.config);\n        } catch (refreshError) {\n          // Refresh failed, logout user\n          this.logout();\n          window.location.href = '/login';\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n  async login(email, password) {\n    try {\n      const response = await this.apiClient.post('/login', {\n        email,\n        password\n      });\n      if (response.data.success) {\n        // Convert backend response to expected format\n        const authData = {\n          token: response.data.data.token,\n          refreshToken: response.data.data.token,\n          // Use same token for simplicity\n          user: {\n            id: response.data.data.user.id.toString(),\n            username: response.data.data.user.name,\n            email: response.data.data.user.email,\n            firstName: response.data.data.user.name.split(' ')[0] || '',\n            lastName: response.data.data.user.name.split(' ')[1] || '',\n            role: response.data.data.user.role,\n            permissions: ['CREATE_TESTS', 'EXECUTE_TESTS', 'VIEW_REPORTS', 'VIEW_PRS', 'MANAGE_USERS']\n          }\n        };\n\n        // Store tokens\n        localStorage.setItem('token', authData.token);\n        localStorage.setItem('refreshToken', authData.refreshToken);\n        return authData;\n      } else {\n        throw new Error(response.data.message || 'Login failed');\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Login failed');\n    }\n  }\n  async register(userData) {\n    try {\n      const response = await this.apiClient.post('/register', userData);\n      return response.data.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Registration failed');\n    }\n  }\n  async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await this.apiClient.post('/refresh', {\n        refreshToken\n      });\n      const authData = response.data.data;\n      localStorage.setItem('token', authData.token);\n      localStorage.setItem('refreshToken', authData.refreshToken);\n      return authData;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Token refresh failed');\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const response = await this.apiClient.get('/me');\n      return response.data.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to get user info');\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","constructor","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","refreshToken","refreshError","logout","window","location","href","login","email","password","post","data","success","authData","user","id","toString","username","name","firstName","split","lastName","role","permissions","setItem","Error","message","_error$response2","_error$response2$data","register","userData","_error$response3","_error$response3$data","_error$response4","_error$response4$data","removeItem","getCurrentUser","get","_error$response5","_error$response5$data","isAuthenticated","getToken","authService"],"sources":["/Users/vnannuri/Desktop/test/test-platform-frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\n\ninterface RegisterRequest {\n  username: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface AuthResponse {\n  token: string;\n  refreshToken: string;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    permissions: string[];\n  };\n}\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  permissions: string[];\n}\n\nclass AuthService {\n  private apiClient = axios.create({\n    baseURL: `${API_BASE_URL}/api/auth`,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  constructor() {\n    // Add request interceptor to include token\n    this.apiClient.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Add response interceptor for error handling\n    this.apiClient.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        if (error.response?.status === 401) {\n          // Token expired, try to refresh\n          try {\n            await this.refreshToken();\n            // Retry the original request\n            return this.apiClient.request(error.config);\n          } catch (refreshError) {\n            // Refresh failed, logout user\n            this.logout();\n            window.location.href = '/login';\n          }\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  async login(email: string, password: string): Promise<AuthResponse> {\n    try {\n      const response = await this.apiClient.post<any>('/login', {\n        email,\n        password,\n      });\n      \n      if (response.data.success) {\n        // Convert backend response to expected format\n        const authData: AuthResponse = {\n          token: response.data.data.token,\n          refreshToken: response.data.data.token, // Use same token for simplicity\n          user: {\n            id: response.data.data.user.id.toString(),\n            username: response.data.data.user.name,\n            email: response.data.data.user.email,\n            firstName: response.data.data.user.name.split(' ')[0] || '',\n            lastName: response.data.data.user.name.split(' ')[1] || '',\n            role: response.data.data.user.role,\n            permissions: ['CREATE_TESTS', 'EXECUTE_TESTS', 'VIEW_REPORTS', 'VIEW_PRS', 'MANAGE_USERS']\n          }\n        };\n        \n        // Store tokens\n        localStorage.setItem('token', authData.token);\n        localStorage.setItem('refreshToken', authData.refreshToken);\n        \n        return authData;\n      } else {\n        throw new Error(response.data.message || 'Login failed');\n      }\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  }\n\n  async register(userData: RegisterRequest): Promise<AuthResponse> {\n    try {\n      const response = await this.apiClient.post<{ data: AuthResponse }>('/register', userData);\n      \n      return response.data.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Registration failed');\n    }\n  }\n\n  async refreshToken(): Promise<AuthResponse> {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await this.apiClient.post<{ data: AuthResponse }>('/refresh', {\n        refreshToken,\n      });\n\n      const authData = response.data.data;\n      localStorage.setItem('token', authData.token);\n      localStorage.setItem('refreshToken', authData.refreshToken);\n\n      return authData;\n    } catch (error: any) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      throw new Error(error.response?.data?.message || 'Token refresh failed');\n    }\n  }\n\n  async getCurrentUser(): Promise<User> {\n    try {\n      const response = await this.apiClient.get<{ data: User }>('/me');\n      return response.data.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to get user info');\n    }\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n}\n\nexport const authService = new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}